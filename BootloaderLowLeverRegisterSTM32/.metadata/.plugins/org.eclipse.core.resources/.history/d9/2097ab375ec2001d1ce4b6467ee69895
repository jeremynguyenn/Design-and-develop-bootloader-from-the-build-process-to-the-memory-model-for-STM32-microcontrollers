
8_bootloader1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800178c  0800178c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800178c  0800178c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800178c  0800178c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800178c  0800178c  0001178c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001790  08001790  00011790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  080017f8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080017f8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003313  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b4b  00000000  00000000  000233a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00023ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000240f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd6f  00000000  00000000  00024270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a80  00000000  00000000  00033fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055596  00000000  00000000  00036a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008bff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d90  00000000  00000000  0008c048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800167c 	.word	0x0800167c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800167c 	.word	0x0800167c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <led_init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <led_init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <led_init+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <led_init+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <led_init+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <button_init+0x34>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <button_init+0x34>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <button_init+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <button_init+0x38>)
 80002d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <button_init+0x38>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <button_init+0x38>)
 80002de:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002e2:	6013      	str	r3, [r2, #0]

}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020800 	.word	0x40020800

080002f8 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <fpu_enable+0x50>)
 80002fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <fpu_enable+0x50>)
 8000304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 800030c:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <fpu_enable+0x50>)
 800030e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <fpu_enable+0x50>)
 8000314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <fpu_enable+0x50>)
 800031e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <fpu_enable+0x50>)
 8000324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <fpu_enable+0x50>)
 800032e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <fpu_enable+0x50>)
 8000334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <jmp_to_default_app>:

#define MEM_CHECKK_V2


void jmp_to_default_app(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
	uint32_t app_start_address;
	func_ptr jump_to_app;

	printf("Bootloader Started....\n\r");
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <jmp_to_default_app+0x50>)
 8000354:	f000 fa3c 	bl	80007d0 <iprintf>
	delay(300);
 8000358:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800035c:	f000 f8da 	bl	8000514 <delay>
	if(((*(uint32_t *)APPLICATION_ADDRESS) & MSP_VERIFY_MASK ) ==  0x20020000)
#endif

#ifdef MEM_CHECKK_V2
	/*Version 2*/
	if((*(uint32_t *)APPLICATION_ADDRESS) != EMPTY_MEM)
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <jmp_to_default_app+0x54>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000368:	d011      	beq.n	800038e <jmp_to_default_app+0x42>
#endif

	{
		printf("Starting application.....\n\r");
 800036a:	480e      	ldr	r0, [pc, #56]	; (80003a4 <jmp_to_default_app+0x58>)
 800036c:	f000 fa30 	bl	80007d0 <iprintf>
		app_start_address =  *(uint32_t *)(APPLICATION_ADDRESS + 4);
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <jmp_to_default_app+0x5c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	60fb      	str	r3, [r7, #12]

		jump_to_app = (func_ptr) app_start_address;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	60bb      	str	r3, [r7, #8]

		/*Initialialize main stack pointer*/
		__set_MSP(*(uint32_t *)APPLICATION_ADDRESS);
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <jmp_to_default_app+0x54>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f383 8808 	msr	MSP, r3
}
 8000386:	bf00      	nop

		/*jump*/
		jump_to_app();
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	4798      	blx	r3
	{
		printf("No application found at location....\n\r");
	}


}
 800038c:	e002      	b.n	8000394 <jmp_to_default_app+0x48>
		printf("No application found at location....\n\r");
 800038e:	4807      	ldr	r0, [pc, #28]	; (80003ac <jmp_to_default_app+0x60>)
 8000390:	f000 fa1e 	bl	80007d0 <iprintf>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	08001694 	.word	0x08001694
 80003a0:	08008000 	.word	0x08008000
 80003a4:	080016b0 	.word	0x080016b0
 80003a8:	08008004 	.word	0x08008004
 80003ac:	080016cc 	.word	0x080016cc

080003b0 <main>:

int main()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 80003b4:	f7ff ffa0 	bl	80002f8 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 80003b8:	f000 f924 	bl	8000604 <debug_uart_init>

	/*Initialize timebase*/
	timebase_init();
 80003bc:	f000 f8ec 	bl	8000598 <timebase_init>

	/*Initialize LED*/
	led_init();
 80003c0:	f7ff ff5e 	bl	8000280 <led_init>

	/*Initialize Push button*/

	button_init();
 80003c4:	f7ff ff7a 	bl	80002bc <button_init>

	jmp_to_default_app();
 80003c8:	f7ff ffc0 	bl	800034c <jmp_to_default_app>

	while(1)
 80003cc:	e7fe      	b.n	80003cc <main+0x1c>

080003ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e00a      	b.n	80003f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003e0:	f3af 8000 	nop.w
 80003e4:	4601      	mov	r1, r0
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	b2ca      	uxtb	r2, r1
 80003ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	3301      	adds	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	697a      	ldr	r2, [r7, #20]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbf0      	blt.n	80003e0 <_read+0x12>
	}

return len;
 80003fe:	687b      	ldr	r3, [r7, #4]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	e009      	b.n	800042e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	60ba      	str	r2, [r7, #8]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f8e2 	bl	80005ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697a      	ldr	r2, [r7, #20]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	429a      	cmp	r2, r3
 8000434:	dbf1      	blt.n	800041a <_write+0x12>
	}
	return len;
 8000436:	687b      	ldr	r3, [r7, #4]
}
 8000438:	4618      	mov	r0, r3
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <_close>:

int _close(int file)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	return -1;
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000468:	605a      	str	r2, [r3, #4]
	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <_isatty>:

int _isatty(int file)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	return 1;
 8000480:	2301      	movs	r3, #1
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <_sbrk+0x5c>)
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <_sbrk+0x60>)
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <_sbrk+0x64>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <_sbrk+0x68>)
 80004c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <_sbrk+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d207      	bcs.n	80004e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d8:	f000 f948 	bl	800076c <__errno>
 80004dc:	4603      	mov	r3, r0
 80004de:	220c      	movs	r2, #12
 80004e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	e009      	b.n	80004fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <_sbrk+0x64>)
 80004f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20020000 	.word	0x20020000
 8000508:	00000400 	.word	0x00000400
 800050c:	20000080 	.word	0x20000080
 8000510:	200000a8 	.word	0x200000a8

08000514 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 800051c:	f000 f818 	bl	8000550 <get_tick>
 8000520:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052c:	d002      	beq.n	8000534 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000534:	bf00      	nop
 8000536:	f000 f80b 	bl	8000550 <get_tick>
 800053a:	4602      	mov	r2, r0
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	429a      	cmp	r2, r3
 8000544:	d8f7      	bhi.n	8000536 <delay+0x22>

}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <get_tick>:

uint32_t get_tick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <get_tick+0x24>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <get_tick+0x28>)
 800055e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000560:	b662      	cpsie	i
}
 8000562:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <get_tick+0x28>)
 8000566:	681b      	ldr	r3, [r3, #0]

}
 8000568:	4618      	mov	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000090 	.word	0x20000090
 8000578:	2000008c 	.word	0x2000008c

0800057c <tick_increment>:
static void tick_increment(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <tick_increment+0x18>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a03      	ldr	r2, [pc, #12]	; (8000594 <tick_increment+0x18>)
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000090 	.word	0x20000090

08000598 <timebase_init>:
void timebase_init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <timebase_init+0x44>)
 80005a2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005a6:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <timebase_init+0x44>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <timebase_init+0x44>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <timebase_init+0x44>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <timebase_init+0x44>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <timebase_init+0x44>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <timebase_init+0x44>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005cc:	b662      	cpsie	i
}
 80005ce:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	tick_increment();
 80005e4:	f7ff ffca 	bl	800057c <tick_increment>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f84f 	bl	8000698 <uart_write>
	return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <debug_uart_init>:

void debug_uart_init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <debug_uart_init+0x84>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <debug_uart_init+0x84>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <debug_uart_init+0x88>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <debug_uart_init+0x88>)
 800061a:	f023 0310 	bic.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <debug_uart_init+0x88>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a19      	ldr	r2, [pc, #100]	; (800068c <debug_uart_init+0x88>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <debug_uart_init+0x88>)
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <debug_uart_init+0x88>)
 8000632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000636:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <debug_uart_init+0x88>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a13      	ldr	r2, [pc, #76]	; (800068c <debug_uart_init+0x88>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <debug_uart_init+0x88>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <debug_uart_init+0x88>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <debug_uart_init+0x88>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <debug_uart_init+0x88>)
 8000656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800065a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <debug_uart_init+0x84>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <debug_uart_init+0x84>)
 8000662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000668:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <debug_uart_init+0x8c>)
 800066e:	f000 f83f 	bl	80006f0 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <debug_uart_init+0x90>)
 8000674:	2208      	movs	r2, #8
 8000676:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <debug_uart_init+0x90>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <debug_uart_init+0x90>)
 800067e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000682:	60d3      	str	r3, [r2, #12]
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40020000 	.word	0x40020000
 8000690:	00f42400 	.word	0x00f42400
 8000694:	40004400 	.word	0x40004400

08000698 <uart_write>:



static void uart_write(int ch)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <uart_write+0x2c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <uart_write+0x2c>)
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	6053      	str	r3, [r2, #4]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40004400 	.word	0x40004400

080006c8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	085a      	lsrs	r2, r3, #1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	441a      	add	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ffe3 	bl	80006c8 <compute_uart_bd>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <uart_set_baudrate+0x24>)
 8000708:	609a      	str	r2, [r3, #8]
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40004400 	.word	0x40004400

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800071c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f000 f817 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fe31 	bl	80003b0 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800075c:	08001794 	.word	0x08001794
  ldr r2, =_sbss
 8000760:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000764:	200000a4 	.word	0x200000a4

08000768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC_IRQHandler>
	...

0800076c <__errno>:
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <__errno+0x8>)
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	4d0d      	ldr	r5, [pc, #52]	; (80007b0 <__libc_init_array+0x38>)
 800077c:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 800077e:	1b64      	subs	r4, r4, r5
 8000780:	10a4      	asrs	r4, r4, #2
 8000782:	2600      	movs	r6, #0
 8000784:	42a6      	cmp	r6, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	4d0b      	ldr	r5, [pc, #44]	; (80007b8 <__libc_init_array+0x40>)
 800078a:	4c0c      	ldr	r4, [pc, #48]	; (80007bc <__libc_init_array+0x44>)
 800078c:	f000 ff76 	bl	800167c <_init>
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	2600      	movs	r6, #0
 8000796:	42a6      	cmp	r6, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a0:	4798      	blx	r3
 80007a2:	3601      	adds	r6, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007aa:	4798      	blx	r3
 80007ac:	3601      	adds	r6, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	0800178c 	.word	0x0800178c
 80007b4:	0800178c 	.word	0x0800178c
 80007b8:	0800178c 	.word	0x0800178c
 80007bc:	08001790 	.word	0x08001790

080007c0 <memset>:
 80007c0:	4402      	add	r2, r0
 80007c2:	4603      	mov	r3, r0
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d100      	bne.n	80007ca <memset+0xa>
 80007c8:	4770      	bx	lr
 80007ca:	f803 1b01 	strb.w	r1, [r3], #1
 80007ce:	e7f9      	b.n	80007c4 <memset+0x4>

080007d0 <iprintf>:
 80007d0:	b40f      	push	{r0, r1, r2, r3}
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <iprintf+0x2c>)
 80007d4:	b513      	push	{r0, r1, r4, lr}
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	b124      	cbz	r4, 80007e4 <iprintf+0x14>
 80007da:	69a3      	ldr	r3, [r4, #24]
 80007dc:	b913      	cbnz	r3, 80007e4 <iprintf+0x14>
 80007de:	4620      	mov	r0, r4
 80007e0:	f000 f866 	bl	80008b0 <__sinit>
 80007e4:	ab05      	add	r3, sp, #20
 80007e6:	9a04      	ldr	r2, [sp, #16]
 80007e8:	68a1      	ldr	r1, [r4, #8]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	4620      	mov	r0, r4
 80007ee:	f000 f983 	bl	8000af8 <_vfiprintf_r>
 80007f2:	b002      	add	sp, #8
 80007f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f8:	b004      	add	sp, #16
 80007fa:	4770      	bx	lr
 80007fc:	20000000 	.word	0x20000000

08000800 <std>:
 8000800:	2300      	movs	r3, #0
 8000802:	b510      	push	{r4, lr}
 8000804:	4604      	mov	r4, r0
 8000806:	e9c0 3300 	strd	r3, r3, [r0]
 800080a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800080e:	6083      	str	r3, [r0, #8]
 8000810:	8181      	strh	r1, [r0, #12]
 8000812:	6643      	str	r3, [r0, #100]	; 0x64
 8000814:	81c2      	strh	r2, [r0, #14]
 8000816:	6183      	str	r3, [r0, #24]
 8000818:	4619      	mov	r1, r3
 800081a:	2208      	movs	r2, #8
 800081c:	305c      	adds	r0, #92	; 0x5c
 800081e:	f7ff ffcf 	bl	80007c0 <memset>
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <std+0x38>)
 8000824:	6263      	str	r3, [r4, #36]	; 0x24
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <std+0x3c>)
 8000828:	62a3      	str	r3, [r4, #40]	; 0x28
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <std+0x40>)
 800082c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <std+0x44>)
 8000830:	6224      	str	r4, [r4, #32]
 8000832:	6323      	str	r3, [r4, #48]	; 0x30
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	080010a1 	.word	0x080010a1
 800083c:	080010c3 	.word	0x080010c3
 8000840:	080010fb 	.word	0x080010fb
 8000844:	0800111f 	.word	0x0800111f

08000848 <_cleanup_r>:
 8000848:	4901      	ldr	r1, [pc, #4]	; (8000850 <_cleanup_r+0x8>)
 800084a:	f000 b8af 	b.w	80009ac <_fwalk_reent>
 800084e:	bf00      	nop
 8000850:	080013f9 	.word	0x080013f9

08000854 <__sfmoreglue>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	1e4a      	subs	r2, r1, #1
 8000858:	2568      	movs	r5, #104	; 0x68
 800085a:	4355      	muls	r5, r2
 800085c:	460e      	mov	r6, r1
 800085e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000862:	f000 f8c5 	bl	80009f0 <_malloc_r>
 8000866:	4604      	mov	r4, r0
 8000868:	b140      	cbz	r0, 800087c <__sfmoreglue+0x28>
 800086a:	2100      	movs	r1, #0
 800086c:	e9c0 1600 	strd	r1, r6, [r0]
 8000870:	300c      	adds	r0, #12
 8000872:	60a0      	str	r0, [r4, #8]
 8000874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000878:	f7ff ffa2 	bl	80007c0 <memset>
 800087c:	4620      	mov	r0, r4
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__sfp_lock_acquire>:
 8000880:	4801      	ldr	r0, [pc, #4]	; (8000888 <__sfp_lock_acquire+0x8>)
 8000882:	f000 b8b3 	b.w	80009ec <__retarget_lock_acquire_recursive>
 8000886:	bf00      	nop
 8000888:	2000009c 	.word	0x2000009c

0800088c <__sfp_lock_release>:
 800088c:	4801      	ldr	r0, [pc, #4]	; (8000894 <__sfp_lock_release+0x8>)
 800088e:	f000 b8ae 	b.w	80009ee <__retarget_lock_release_recursive>
 8000892:	bf00      	nop
 8000894:	2000009c 	.word	0x2000009c

08000898 <__sinit_lock_acquire>:
 8000898:	4801      	ldr	r0, [pc, #4]	; (80008a0 <__sinit_lock_acquire+0x8>)
 800089a:	f000 b8a7 	b.w	80009ec <__retarget_lock_acquire_recursive>
 800089e:	bf00      	nop
 80008a0:	20000097 	.word	0x20000097

080008a4 <__sinit_lock_release>:
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <__sinit_lock_release+0x8>)
 80008a6:	f000 b8a2 	b.w	80009ee <__retarget_lock_release_recursive>
 80008aa:	bf00      	nop
 80008ac:	20000097 	.word	0x20000097

080008b0 <__sinit>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	f7ff fff0 	bl	8000898 <__sinit_lock_acquire>
 80008b8:	69a3      	ldr	r3, [r4, #24]
 80008ba:	b11b      	cbz	r3, 80008c4 <__sinit+0x14>
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f7ff bff0 	b.w	80008a4 <__sinit_lock_release>
 80008c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008c8:	6523      	str	r3, [r4, #80]	; 0x50
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <__sinit+0x68>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <__sinit+0x6c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	bf04      	itt	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	61a3      	streq	r3, [r4, #24]
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f820 	bl	8000920 <__sfp>
 80008e0:	6060      	str	r0, [r4, #4]
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 f81c 	bl	8000920 <__sfp>
 80008e8:	60a0      	str	r0, [r4, #8]
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 f818 	bl	8000920 <__sfp>
 80008f0:	2200      	movs	r2, #0
 80008f2:	60e0      	str	r0, [r4, #12]
 80008f4:	2104      	movs	r1, #4
 80008f6:	6860      	ldr	r0, [r4, #4]
 80008f8:	f7ff ff82 	bl	8000800 <std>
 80008fc:	68a0      	ldr	r0, [r4, #8]
 80008fe:	2201      	movs	r2, #1
 8000900:	2109      	movs	r1, #9
 8000902:	f7ff ff7d 	bl	8000800 <std>
 8000906:	68e0      	ldr	r0, [r4, #12]
 8000908:	2202      	movs	r2, #2
 800090a:	2112      	movs	r1, #18
 800090c:	f7ff ff78 	bl	8000800 <std>
 8000910:	2301      	movs	r3, #1
 8000912:	61a3      	str	r3, [r4, #24]
 8000914:	e7d2      	b.n	80008bc <__sinit+0xc>
 8000916:	bf00      	nop
 8000918:	080016f4 	.word	0x080016f4
 800091c:	08000849 	.word	0x08000849

08000920 <__sfp>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	4607      	mov	r7, r0
 8000924:	f7ff ffac 	bl	8000880 <__sfp_lock_acquire>
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <__sfp+0x84>)
 800092a:	681e      	ldr	r6, [r3, #0]
 800092c:	69b3      	ldr	r3, [r6, #24]
 800092e:	b913      	cbnz	r3, 8000936 <__sfp+0x16>
 8000930:	4630      	mov	r0, r6
 8000932:	f7ff ffbd 	bl	80008b0 <__sinit>
 8000936:	3648      	adds	r6, #72	; 0x48
 8000938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	d503      	bpl.n	8000948 <__sfp+0x28>
 8000940:	6833      	ldr	r3, [r6, #0]
 8000942:	b30b      	cbz	r3, 8000988 <__sfp+0x68>
 8000944:	6836      	ldr	r6, [r6, #0]
 8000946:	e7f7      	b.n	8000938 <__sfp+0x18>
 8000948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800094c:	b9d5      	cbnz	r5, 8000984 <__sfp+0x64>
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <__sfp+0x88>)
 8000950:	60e3      	str	r3, [r4, #12]
 8000952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000956:	6665      	str	r5, [r4, #100]	; 0x64
 8000958:	f000 f847 	bl	80009ea <__retarget_lock_init_recursive>
 800095c:	f7ff ff96 	bl	800088c <__sfp_lock_release>
 8000960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000968:	6025      	str	r5, [r4, #0]
 800096a:	61a5      	str	r5, [r4, #24]
 800096c:	2208      	movs	r2, #8
 800096e:	4629      	mov	r1, r5
 8000970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000974:	f7ff ff24 	bl	80007c0 <memset>
 8000978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800097c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000980:	4620      	mov	r0, r4
 8000982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000984:	3468      	adds	r4, #104	; 0x68
 8000986:	e7d9      	b.n	800093c <__sfp+0x1c>
 8000988:	2104      	movs	r1, #4
 800098a:	4638      	mov	r0, r7
 800098c:	f7ff ff62 	bl	8000854 <__sfmoreglue>
 8000990:	4604      	mov	r4, r0
 8000992:	6030      	str	r0, [r6, #0]
 8000994:	2800      	cmp	r0, #0
 8000996:	d1d5      	bne.n	8000944 <__sfp+0x24>
 8000998:	f7ff ff78 	bl	800088c <__sfp_lock_release>
 800099c:	230c      	movs	r3, #12
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	e7ee      	b.n	8000980 <__sfp+0x60>
 80009a2:	bf00      	nop
 80009a4:	080016f4 	.word	0x080016f4
 80009a8:	ffff0001 	.word	0xffff0001

080009ac <_fwalk_reent>:
 80009ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009b0:	4606      	mov	r6, r0
 80009b2:	4688      	mov	r8, r1
 80009b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009b8:	2700      	movs	r7, #0
 80009ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009be:	f1b9 0901 	subs.w	r9, r9, #1
 80009c2:	d505      	bpl.n	80009d0 <_fwalk_reent+0x24>
 80009c4:	6824      	ldr	r4, [r4, #0]
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d1f7      	bne.n	80009ba <_fwalk_reent+0xe>
 80009ca:	4638      	mov	r0, r7
 80009cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009d0:	89ab      	ldrh	r3, [r5, #12]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d907      	bls.n	80009e6 <_fwalk_reent+0x3a>
 80009d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009da:	3301      	adds	r3, #1
 80009dc:	d003      	beq.n	80009e6 <_fwalk_reent+0x3a>
 80009de:	4629      	mov	r1, r5
 80009e0:	4630      	mov	r0, r6
 80009e2:	47c0      	blx	r8
 80009e4:	4307      	orrs	r7, r0
 80009e6:	3568      	adds	r5, #104	; 0x68
 80009e8:	e7e9      	b.n	80009be <_fwalk_reent+0x12>

080009ea <__retarget_lock_init_recursive>:
 80009ea:	4770      	bx	lr

080009ec <__retarget_lock_acquire_recursive>:
 80009ec:	4770      	bx	lr

080009ee <__retarget_lock_release_recursive>:
 80009ee:	4770      	bx	lr

080009f0 <_malloc_r>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	1ccd      	adds	r5, r1, #3
 80009f4:	f025 0503 	bic.w	r5, r5, #3
 80009f8:	3508      	adds	r5, #8
 80009fa:	2d0c      	cmp	r5, #12
 80009fc:	bf38      	it	cc
 80009fe:	250c      	movcc	r5, #12
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	4606      	mov	r6, r0
 8000a04:	db01      	blt.n	8000a0a <_malloc_r+0x1a>
 8000a06:	42a9      	cmp	r1, r5
 8000a08:	d903      	bls.n	8000a12 <_malloc_r+0x22>
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	6033      	str	r3, [r6, #0]
 8000a0e:	2000      	movs	r0, #0
 8000a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a12:	f000 fda3 	bl	800155c <__malloc_lock>
 8000a16:	4921      	ldr	r1, [pc, #132]	; (8000a9c <_malloc_r+0xac>)
 8000a18:	680a      	ldr	r2, [r1, #0]
 8000a1a:	4614      	mov	r4, r2
 8000a1c:	b99c      	cbnz	r4, 8000a46 <_malloc_r+0x56>
 8000a1e:	4f20      	ldr	r7, [pc, #128]	; (8000aa0 <_malloc_r+0xb0>)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b923      	cbnz	r3, 8000a2e <_malloc_r+0x3e>
 8000a24:	4621      	mov	r1, r4
 8000a26:	4630      	mov	r0, r6
 8000a28:	f000 fb2a 	bl	8001080 <_sbrk_r>
 8000a2c:	6038      	str	r0, [r7, #0]
 8000a2e:	4629      	mov	r1, r5
 8000a30:	4630      	mov	r0, r6
 8000a32:	f000 fb25 	bl	8001080 <_sbrk_r>
 8000a36:	1c43      	adds	r3, r0, #1
 8000a38:	d123      	bne.n	8000a82 <_malloc_r+0x92>
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	6033      	str	r3, [r6, #0]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	f000 fd92 	bl	8001568 <__malloc_unlock>
 8000a44:	e7e3      	b.n	8000a0e <_malloc_r+0x1e>
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	1b5b      	subs	r3, r3, r5
 8000a4a:	d417      	bmi.n	8000a7c <_malloc_r+0x8c>
 8000a4c:	2b0b      	cmp	r3, #11
 8000a4e:	d903      	bls.n	8000a58 <_malloc_r+0x68>
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	441c      	add	r4, r3
 8000a54:	6025      	str	r5, [r4, #0]
 8000a56:	e004      	b.n	8000a62 <_malloc_r+0x72>
 8000a58:	6863      	ldr	r3, [r4, #4]
 8000a5a:	42a2      	cmp	r2, r4
 8000a5c:	bf0c      	ite	eq
 8000a5e:	600b      	streq	r3, [r1, #0]
 8000a60:	6053      	strne	r3, [r2, #4]
 8000a62:	4630      	mov	r0, r6
 8000a64:	f000 fd80 	bl	8001568 <__malloc_unlock>
 8000a68:	f104 000b 	add.w	r0, r4, #11
 8000a6c:	1d23      	adds	r3, r4, #4
 8000a6e:	f020 0007 	bic.w	r0, r0, #7
 8000a72:	1ac2      	subs	r2, r0, r3
 8000a74:	d0cc      	beq.n	8000a10 <_malloc_r+0x20>
 8000a76:	1a1b      	subs	r3, r3, r0
 8000a78:	50a3      	str	r3, [r4, r2]
 8000a7a:	e7c9      	b.n	8000a10 <_malloc_r+0x20>
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	6864      	ldr	r4, [r4, #4]
 8000a80:	e7cc      	b.n	8000a1c <_malloc_r+0x2c>
 8000a82:	1cc4      	adds	r4, r0, #3
 8000a84:	f024 0403 	bic.w	r4, r4, #3
 8000a88:	42a0      	cmp	r0, r4
 8000a8a:	d0e3      	beq.n	8000a54 <_malloc_r+0x64>
 8000a8c:	1a21      	subs	r1, r4, r0
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f000 faf6 	bl	8001080 <_sbrk_r>
 8000a94:	3001      	adds	r0, #1
 8000a96:	d1dd      	bne.n	8000a54 <_malloc_r+0x64>
 8000a98:	e7cf      	b.n	8000a3a <_malloc_r+0x4a>
 8000a9a:	bf00      	nop
 8000a9c:	20000084 	.word	0x20000084
 8000aa0:	20000088 	.word	0x20000088

08000aa4 <__sfputc_r>:
 8000aa4:	6893      	ldr	r3, [r2, #8]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	b410      	push	{r4}
 8000aac:	6093      	str	r3, [r2, #8]
 8000aae:	da08      	bge.n	8000ac2 <__sfputc_r+0x1e>
 8000ab0:	6994      	ldr	r4, [r2, #24]
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	db01      	blt.n	8000aba <__sfputc_r+0x16>
 8000ab6:	290a      	cmp	r1, #10
 8000ab8:	d103      	bne.n	8000ac2 <__sfputc_r+0x1e>
 8000aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000abe:	f000 bb33 	b.w	8001128 <__swbuf_r>
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	1c58      	adds	r0, r3, #1
 8000ac6:	6010      	str	r0, [r2, #0]
 8000ac8:	7019      	strb	r1, [r3, #0]
 8000aca:	4608      	mov	r0, r1
 8000acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <__sfputs_r>:
 8000ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad4:	4606      	mov	r6, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	4614      	mov	r4, r2
 8000ada:	18d5      	adds	r5, r2, r3
 8000adc:	42ac      	cmp	r4, r5
 8000ade:	d101      	bne.n	8000ae4 <__sfputs_r+0x12>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e007      	b.n	8000af4 <__sfputs_r+0x22>
 8000ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ae8:	463a      	mov	r2, r7
 8000aea:	4630      	mov	r0, r6
 8000aec:	f7ff ffda 	bl	8000aa4 <__sfputc_r>
 8000af0:	1c43      	adds	r3, r0, #1
 8000af2:	d1f3      	bne.n	8000adc <__sfputs_r+0xa>
 8000af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000af8 <_vfiprintf_r>:
 8000af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000afc:	460d      	mov	r5, r1
 8000afe:	b09d      	sub	sp, #116	; 0x74
 8000b00:	4614      	mov	r4, r2
 8000b02:	4698      	mov	r8, r3
 8000b04:	4606      	mov	r6, r0
 8000b06:	b118      	cbz	r0, 8000b10 <_vfiprintf_r+0x18>
 8000b08:	6983      	ldr	r3, [r0, #24]
 8000b0a:	b90b      	cbnz	r3, 8000b10 <_vfiprintf_r+0x18>
 8000b0c:	f7ff fed0 	bl	80008b0 <__sinit>
 8000b10:	4b89      	ldr	r3, [pc, #548]	; (8000d38 <_vfiprintf_r+0x240>)
 8000b12:	429d      	cmp	r5, r3
 8000b14:	d11b      	bne.n	8000b4e <_vfiprintf_r+0x56>
 8000b16:	6875      	ldr	r5, [r6, #4]
 8000b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b1a:	07d9      	lsls	r1, r3, #31
 8000b1c:	d405      	bmi.n	8000b2a <_vfiprintf_r+0x32>
 8000b1e:	89ab      	ldrh	r3, [r5, #12]
 8000b20:	059a      	lsls	r2, r3, #22
 8000b22:	d402      	bmi.n	8000b2a <_vfiprintf_r+0x32>
 8000b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b26:	f7ff ff61 	bl	80009ec <__retarget_lock_acquire_recursive>
 8000b2a:	89ab      	ldrh	r3, [r5, #12]
 8000b2c:	071b      	lsls	r3, r3, #28
 8000b2e:	d501      	bpl.n	8000b34 <_vfiprintf_r+0x3c>
 8000b30:	692b      	ldr	r3, [r5, #16]
 8000b32:	b9eb      	cbnz	r3, 8000b70 <_vfiprintf_r+0x78>
 8000b34:	4629      	mov	r1, r5
 8000b36:	4630      	mov	r0, r6
 8000b38:	f000 fb5a 	bl	80011f0 <__swsetup_r>
 8000b3c:	b1c0      	cbz	r0, 8000b70 <_vfiprintf_r+0x78>
 8000b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b40:	07dc      	lsls	r4, r3, #31
 8000b42:	d50e      	bpl.n	8000b62 <_vfiprintf_r+0x6a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	b01d      	add	sp, #116	; 0x74
 8000b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b4e:	4b7b      	ldr	r3, [pc, #492]	; (8000d3c <_vfiprintf_r+0x244>)
 8000b50:	429d      	cmp	r5, r3
 8000b52:	d101      	bne.n	8000b58 <_vfiprintf_r+0x60>
 8000b54:	68b5      	ldr	r5, [r6, #8]
 8000b56:	e7df      	b.n	8000b18 <_vfiprintf_r+0x20>
 8000b58:	4b79      	ldr	r3, [pc, #484]	; (8000d40 <_vfiprintf_r+0x248>)
 8000b5a:	429d      	cmp	r5, r3
 8000b5c:	bf08      	it	eq
 8000b5e:	68f5      	ldreq	r5, [r6, #12]
 8000b60:	e7da      	b.n	8000b18 <_vfiprintf_r+0x20>
 8000b62:	89ab      	ldrh	r3, [r5, #12]
 8000b64:	0598      	lsls	r0, r3, #22
 8000b66:	d4ed      	bmi.n	8000b44 <_vfiprintf_r+0x4c>
 8000b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b6a:	f7ff ff40 	bl	80009ee <__retarget_lock_release_recursive>
 8000b6e:	e7e9      	b.n	8000b44 <_vfiprintf_r+0x4c>
 8000b70:	2300      	movs	r3, #0
 8000b72:	9309      	str	r3, [sp, #36]	; 0x24
 8000b74:	2320      	movs	r3, #32
 8000b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b7e:	2330      	movs	r3, #48	; 0x30
 8000b80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d44 <_vfiprintf_r+0x24c>
 8000b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b88:	f04f 0901 	mov.w	r9, #1
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	469a      	mov	sl, r3
 8000b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b94:	b10a      	cbz	r2, 8000b9a <_vfiprintf_r+0xa2>
 8000b96:	2a25      	cmp	r2, #37	; 0x25
 8000b98:	d1f9      	bne.n	8000b8e <_vfiprintf_r+0x96>
 8000b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b9e:	d00b      	beq.n	8000bb8 <_vfiprintf_r+0xc0>
 8000ba0:	465b      	mov	r3, fp
 8000ba2:	4622      	mov	r2, r4
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f7ff ff93 	bl	8000ad2 <__sfputs_r>
 8000bac:	3001      	adds	r0, #1
 8000bae:	f000 80aa 	beq.w	8000d06 <_vfiprintf_r+0x20e>
 8000bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bb4:	445a      	add	r2, fp
 8000bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8000bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80a2 	beq.w	8000d06 <_vfiprintf_r+0x20e>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bcc:	f10a 0a01 	add.w	sl, sl, #1
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	9307      	str	r3, [sp, #28]
 8000bd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8000bda:	4654      	mov	r4, sl
 8000bdc:	2205      	movs	r2, #5
 8000bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be2:	4858      	ldr	r0, [pc, #352]	; (8000d44 <_vfiprintf_r+0x24c>)
 8000be4:	f7ff fafc 	bl	80001e0 <memchr>
 8000be8:	9a04      	ldr	r2, [sp, #16]
 8000bea:	b9d8      	cbnz	r0, 8000c24 <_vfiprintf_r+0x12c>
 8000bec:	06d1      	lsls	r1, r2, #27
 8000bee:	bf44      	itt	mi
 8000bf0:	2320      	movmi	r3, #32
 8000bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bf6:	0713      	lsls	r3, r2, #28
 8000bf8:	bf44      	itt	mi
 8000bfa:	232b      	movmi	r3, #43	; 0x2b
 8000bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c00:	f89a 3000 	ldrb.w	r3, [sl]
 8000c04:	2b2a      	cmp	r3, #42	; 0x2a
 8000c06:	d015      	beq.n	8000c34 <_vfiprintf_r+0x13c>
 8000c08:	9a07      	ldr	r2, [sp, #28]
 8000c0a:	4654      	mov	r4, sl
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f04f 0c0a 	mov.w	ip, #10
 8000c12:	4621      	mov	r1, r4
 8000c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c18:	3b30      	subs	r3, #48	; 0x30
 8000c1a:	2b09      	cmp	r3, #9
 8000c1c:	d94e      	bls.n	8000cbc <_vfiprintf_r+0x1c4>
 8000c1e:	b1b0      	cbz	r0, 8000c4e <_vfiprintf_r+0x156>
 8000c20:	9207      	str	r2, [sp, #28]
 8000c22:	e014      	b.n	8000c4e <_vfiprintf_r+0x156>
 8000c24:	eba0 0308 	sub.w	r3, r0, r8
 8000c28:	fa09 f303 	lsl.w	r3, r9, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	9304      	str	r3, [sp, #16]
 8000c30:	46a2      	mov	sl, r4
 8000c32:	e7d2      	b.n	8000bda <_vfiprintf_r+0xe2>
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	1d19      	adds	r1, r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	9103      	str	r1, [sp, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bfbb      	ittet	lt
 8000c40:	425b      	neglt	r3, r3
 8000c42:	f042 0202 	orrlt.w	r2, r2, #2
 8000c46:	9307      	strge	r3, [sp, #28]
 8000c48:	9307      	strlt	r3, [sp, #28]
 8000c4a:	bfb8      	it	lt
 8000c4c:	9204      	strlt	r2, [sp, #16]
 8000c4e:	7823      	ldrb	r3, [r4, #0]
 8000c50:	2b2e      	cmp	r3, #46	; 0x2e
 8000c52:	d10c      	bne.n	8000c6e <_vfiprintf_r+0x176>
 8000c54:	7863      	ldrb	r3, [r4, #1]
 8000c56:	2b2a      	cmp	r3, #42	; 0x2a
 8000c58:	d135      	bne.n	8000cc6 <_vfiprintf_r+0x1ce>
 8000c5a:	9b03      	ldr	r3, [sp, #12]
 8000c5c:	1d1a      	adds	r2, r3, #4
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	9203      	str	r2, [sp, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bfb8      	it	lt
 8000c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c6a:	3402      	adds	r4, #2
 8000c6c:	9305      	str	r3, [sp, #20]
 8000c6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d54 <_vfiprintf_r+0x25c>
 8000c72:	7821      	ldrb	r1, [r4, #0]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4650      	mov	r0, sl
 8000c78:	f7ff fab2 	bl	80001e0 <memchr>
 8000c7c:	b140      	cbz	r0, 8000c90 <_vfiprintf_r+0x198>
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	eba0 000a 	sub.w	r0, r0, sl
 8000c84:	fa03 f000 	lsl.w	r0, r3, r0
 8000c88:	9b04      	ldr	r3, [sp, #16]
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	3401      	adds	r4, #1
 8000c8e:	9304      	str	r3, [sp, #16]
 8000c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c94:	482c      	ldr	r0, [pc, #176]	; (8000d48 <_vfiprintf_r+0x250>)
 8000c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	f7ff faa0 	bl	80001e0 <memchr>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d03f      	beq.n	8000d24 <_vfiprintf_r+0x22c>
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <_vfiprintf_r+0x254>)
 8000ca6:	bb1b      	cbnz	r3, 8000cf0 <_vfiprintf_r+0x1f8>
 8000ca8:	9b03      	ldr	r3, [sp, #12]
 8000caa:	3307      	adds	r3, #7
 8000cac:	f023 0307 	bic.w	r3, r3, #7
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	9303      	str	r3, [sp, #12]
 8000cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cb6:	443b      	add	r3, r7
 8000cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cba:	e767      	b.n	8000b8c <_vfiprintf_r+0x94>
 8000cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	e7a5      	b.n	8000c12 <_vfiprintf_r+0x11a>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	3401      	adds	r4, #1
 8000cca:	9305      	str	r3, [sp, #20]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 0c0a 	mov.w	ip, #10
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cd8:	3a30      	subs	r2, #48	; 0x30
 8000cda:	2a09      	cmp	r2, #9
 8000cdc:	d903      	bls.n	8000ce6 <_vfiprintf_r+0x1ee>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0c5      	beq.n	8000c6e <_vfiprintf_r+0x176>
 8000ce2:	9105      	str	r1, [sp, #20]
 8000ce4:	e7c3      	b.n	8000c6e <_vfiprintf_r+0x176>
 8000ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cea:	4604      	mov	r4, r0
 8000cec:	2301      	movs	r3, #1
 8000cee:	e7f0      	b.n	8000cd2 <_vfiprintf_r+0x1da>
 8000cf0:	ab03      	add	r3, sp, #12
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	462a      	mov	r2, r5
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <_vfiprintf_r+0x258>)
 8000cf8:	a904      	add	r1, sp, #16
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f3af 8000 	nop.w
 8000d00:	4607      	mov	r7, r0
 8000d02:	1c78      	adds	r0, r7, #1
 8000d04:	d1d6      	bne.n	8000cb4 <_vfiprintf_r+0x1bc>
 8000d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d08:	07d9      	lsls	r1, r3, #31
 8000d0a:	d405      	bmi.n	8000d18 <_vfiprintf_r+0x220>
 8000d0c:	89ab      	ldrh	r3, [r5, #12]
 8000d0e:	059a      	lsls	r2, r3, #22
 8000d10:	d402      	bmi.n	8000d18 <_vfiprintf_r+0x220>
 8000d12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d14:	f7ff fe6b 	bl	80009ee <__retarget_lock_release_recursive>
 8000d18:	89ab      	ldrh	r3, [r5, #12]
 8000d1a:	065b      	lsls	r3, r3, #25
 8000d1c:	f53f af12 	bmi.w	8000b44 <_vfiprintf_r+0x4c>
 8000d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d22:	e711      	b.n	8000b48 <_vfiprintf_r+0x50>
 8000d24:	ab03      	add	r3, sp, #12
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	462a      	mov	r2, r5
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <_vfiprintf_r+0x258>)
 8000d2c:	a904      	add	r1, sp, #16
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f000 f880 	bl	8000e34 <_printf_i>
 8000d34:	e7e4      	b.n	8000d00 <_vfiprintf_r+0x208>
 8000d36:	bf00      	nop
 8000d38:	08001718 	.word	0x08001718
 8000d3c:	08001738 	.word	0x08001738
 8000d40:	080016f8 	.word	0x080016f8
 8000d44:	08001758 	.word	0x08001758
 8000d48:	08001762 	.word	0x08001762
 8000d4c:	00000000 	.word	0x00000000
 8000d50:	08000ad3 	.word	0x08000ad3
 8000d54:	0800175e 	.word	0x0800175e

08000d58 <_printf_common>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	4616      	mov	r6, r2
 8000d5e:	4699      	mov	r9, r3
 8000d60:	688a      	ldr	r2, [r1, #8]
 8000d62:	690b      	ldr	r3, [r1, #16]
 8000d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bfb8      	it	lt
 8000d6c:	4613      	movlt	r3, r2
 8000d6e:	6033      	str	r3, [r6, #0]
 8000d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d74:	4607      	mov	r7, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	b10a      	cbz	r2, 8000d7e <_printf_common+0x26>
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	6033      	str	r3, [r6, #0]
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	0699      	lsls	r1, r3, #26
 8000d82:	bf42      	ittt	mi
 8000d84:	6833      	ldrmi	r3, [r6, #0]
 8000d86:	3302      	addmi	r3, #2
 8000d88:	6033      	strmi	r3, [r6, #0]
 8000d8a:	6825      	ldr	r5, [r4, #0]
 8000d8c:	f015 0506 	ands.w	r5, r5, #6
 8000d90:	d106      	bne.n	8000da0 <_printf_common+0x48>
 8000d92:	f104 0a19 	add.w	sl, r4, #25
 8000d96:	68e3      	ldr	r3, [r4, #12]
 8000d98:	6832      	ldr	r2, [r6, #0]
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	dc26      	bgt.n	8000dee <_printf_common+0x96>
 8000da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000da4:	1e13      	subs	r3, r2, #0
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	bf18      	it	ne
 8000daa:	2301      	movne	r3, #1
 8000dac:	0692      	lsls	r2, r2, #26
 8000dae:	d42b      	bmi.n	8000e08 <_printf_common+0xb0>
 8000db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000db4:	4649      	mov	r1, r9
 8000db6:	4638      	mov	r0, r7
 8000db8:	47c0      	blx	r8
 8000dba:	3001      	adds	r0, #1
 8000dbc:	d01e      	beq.n	8000dfc <_printf_common+0xa4>
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	68e5      	ldr	r5, [r4, #12]
 8000dc2:	6832      	ldr	r2, [r6, #0]
 8000dc4:	f003 0306 	and.w	r3, r3, #6
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	bf08      	it	eq
 8000dcc:	1aad      	subeq	r5, r5, r2
 8000dce:	68a3      	ldr	r3, [r4, #8]
 8000dd0:	6922      	ldr	r2, [r4, #16]
 8000dd2:	bf0c      	ite	eq
 8000dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dd8:	2500      	movne	r5, #0
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	bfc4      	itt	gt
 8000dde:	1a9b      	subgt	r3, r3, r2
 8000de0:	18ed      	addgt	r5, r5, r3
 8000de2:	2600      	movs	r6, #0
 8000de4:	341a      	adds	r4, #26
 8000de6:	42b5      	cmp	r5, r6
 8000de8:	d11a      	bne.n	8000e20 <_printf_common+0xc8>
 8000dea:	2000      	movs	r0, #0
 8000dec:	e008      	b.n	8000e00 <_printf_common+0xa8>
 8000dee:	2301      	movs	r3, #1
 8000df0:	4652      	mov	r2, sl
 8000df2:	4649      	mov	r1, r9
 8000df4:	4638      	mov	r0, r7
 8000df6:	47c0      	blx	r8
 8000df8:	3001      	adds	r0, #1
 8000dfa:	d103      	bne.n	8000e04 <_printf_common+0xac>
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	3501      	adds	r5, #1
 8000e06:	e7c6      	b.n	8000d96 <_printf_common+0x3e>
 8000e08:	18e1      	adds	r1, r4, r3
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	2030      	movs	r0, #48	; 0x30
 8000e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e12:	4422      	add	r2, r4
 8000e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	e7c7      	b.n	8000db0 <_printf_common+0x58>
 8000e20:	2301      	movs	r3, #1
 8000e22:	4622      	mov	r2, r4
 8000e24:	4649      	mov	r1, r9
 8000e26:	4638      	mov	r0, r7
 8000e28:	47c0      	blx	r8
 8000e2a:	3001      	adds	r0, #1
 8000e2c:	d0e6      	beq.n	8000dfc <_printf_common+0xa4>
 8000e2e:	3601      	adds	r6, #1
 8000e30:	e7d9      	b.n	8000de6 <_printf_common+0x8e>
	...

08000e34 <_printf_i>:
 8000e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	460c      	mov	r4, r1
 8000e3a:	4691      	mov	r9, r2
 8000e3c:	7e27      	ldrb	r7, [r4, #24]
 8000e3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000e40:	2f78      	cmp	r7, #120	; 0x78
 8000e42:	4680      	mov	r8, r0
 8000e44:	469a      	mov	sl, r3
 8000e46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e4a:	d807      	bhi.n	8000e5c <_printf_i+0x28>
 8000e4c:	2f62      	cmp	r7, #98	; 0x62
 8000e4e:	d80a      	bhi.n	8000e66 <_printf_i+0x32>
 8000e50:	2f00      	cmp	r7, #0
 8000e52:	f000 80d8 	beq.w	8001006 <_printf_i+0x1d2>
 8000e56:	2f58      	cmp	r7, #88	; 0x58
 8000e58:	f000 80a3 	beq.w	8000fa2 <_printf_i+0x16e>
 8000e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e64:	e03a      	b.n	8000edc <_printf_i+0xa8>
 8000e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e6a:	2b15      	cmp	r3, #21
 8000e6c:	d8f6      	bhi.n	8000e5c <_printf_i+0x28>
 8000e6e:	a001      	add	r0, pc, #4	; (adr r0, 8000e74 <_printf_i+0x40>)
 8000e70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000e74:	08000ecd 	.word	0x08000ecd
 8000e78:	08000ee1 	.word	0x08000ee1
 8000e7c:	08000e5d 	.word	0x08000e5d
 8000e80:	08000e5d 	.word	0x08000e5d
 8000e84:	08000e5d 	.word	0x08000e5d
 8000e88:	08000e5d 	.word	0x08000e5d
 8000e8c:	08000ee1 	.word	0x08000ee1
 8000e90:	08000e5d 	.word	0x08000e5d
 8000e94:	08000e5d 	.word	0x08000e5d
 8000e98:	08000e5d 	.word	0x08000e5d
 8000e9c:	08000e5d 	.word	0x08000e5d
 8000ea0:	08000fed 	.word	0x08000fed
 8000ea4:	08000f11 	.word	0x08000f11
 8000ea8:	08000fcf 	.word	0x08000fcf
 8000eac:	08000e5d 	.word	0x08000e5d
 8000eb0:	08000e5d 	.word	0x08000e5d
 8000eb4:	0800100f 	.word	0x0800100f
 8000eb8:	08000e5d 	.word	0x08000e5d
 8000ebc:	08000f11 	.word	0x08000f11
 8000ec0:	08000e5d 	.word	0x08000e5d
 8000ec4:	08000e5d 	.word	0x08000e5d
 8000ec8:	08000fd7 	.word	0x08000fd7
 8000ecc:	680b      	ldr	r3, [r1, #0]
 8000ece:	1d1a      	adds	r2, r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	600a      	str	r2, [r1, #0]
 8000ed4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0a3      	b.n	8001028 <_printf_i+0x1f4>
 8000ee0:	6825      	ldr	r5, [r4, #0]
 8000ee2:	6808      	ldr	r0, [r1, #0]
 8000ee4:	062e      	lsls	r6, r5, #24
 8000ee6:	f100 0304 	add.w	r3, r0, #4
 8000eea:	d50a      	bpl.n	8000f02 <_printf_i+0xce>
 8000eec:	6805      	ldr	r5, [r0, #0]
 8000eee:	600b      	str	r3, [r1, #0]
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	da03      	bge.n	8000efc <_printf_i+0xc8>
 8000ef4:	232d      	movs	r3, #45	; 0x2d
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000efc:	485e      	ldr	r0, [pc, #376]	; (8001078 <_printf_i+0x244>)
 8000efe:	230a      	movs	r3, #10
 8000f00:	e019      	b.n	8000f36 <_printf_i+0x102>
 8000f02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000f06:	6805      	ldr	r5, [r0, #0]
 8000f08:	600b      	str	r3, [r1, #0]
 8000f0a:	bf18      	it	ne
 8000f0c:	b22d      	sxthne	r5, r5
 8000f0e:	e7ef      	b.n	8000ef0 <_printf_i+0xbc>
 8000f10:	680b      	ldr	r3, [r1, #0]
 8000f12:	6825      	ldr	r5, [r4, #0]
 8000f14:	1d18      	adds	r0, r3, #4
 8000f16:	6008      	str	r0, [r1, #0]
 8000f18:	0628      	lsls	r0, r5, #24
 8000f1a:	d501      	bpl.n	8000f20 <_printf_i+0xec>
 8000f1c:	681d      	ldr	r5, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <_printf_i+0xf2>
 8000f20:	0669      	lsls	r1, r5, #25
 8000f22:	d5fb      	bpl.n	8000f1c <_printf_i+0xe8>
 8000f24:	881d      	ldrh	r5, [r3, #0]
 8000f26:	4854      	ldr	r0, [pc, #336]	; (8001078 <_printf_i+0x244>)
 8000f28:	2f6f      	cmp	r7, #111	; 0x6f
 8000f2a:	bf0c      	ite	eq
 8000f2c:	2308      	moveq	r3, #8
 8000f2e:	230a      	movne	r3, #10
 8000f30:	2100      	movs	r1, #0
 8000f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f36:	6866      	ldr	r6, [r4, #4]
 8000f38:	60a6      	str	r6, [r4, #8]
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	bfa2      	ittt	ge
 8000f3e:	6821      	ldrge	r1, [r4, #0]
 8000f40:	f021 0104 	bicge.w	r1, r1, #4
 8000f44:	6021      	strge	r1, [r4, #0]
 8000f46:	b90d      	cbnz	r5, 8000f4c <_printf_i+0x118>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d04d      	beq.n	8000fe8 <_printf_i+0x1b4>
 8000f4c:	4616      	mov	r6, r2
 8000f4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f52:	fb03 5711 	mls	r7, r3, r1, r5
 8000f56:	5dc7      	ldrb	r7, [r0, r7]
 8000f58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f5c:	462f      	mov	r7, r5
 8000f5e:	42bb      	cmp	r3, r7
 8000f60:	460d      	mov	r5, r1
 8000f62:	d9f4      	bls.n	8000f4e <_printf_i+0x11a>
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d10b      	bne.n	8000f80 <_printf_i+0x14c>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	07df      	lsls	r7, r3, #31
 8000f6c:	d508      	bpl.n	8000f80 <_printf_i+0x14c>
 8000f6e:	6923      	ldr	r3, [r4, #16]
 8000f70:	6861      	ldr	r1, [r4, #4]
 8000f72:	4299      	cmp	r1, r3
 8000f74:	bfde      	ittt	le
 8000f76:	2330      	movle	r3, #48	; 0x30
 8000f78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f80:	1b92      	subs	r2, r2, r6
 8000f82:	6122      	str	r2, [r4, #16]
 8000f84:	f8cd a000 	str.w	sl, [sp]
 8000f88:	464b      	mov	r3, r9
 8000f8a:	aa03      	add	r2, sp, #12
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	4640      	mov	r0, r8
 8000f90:	f7ff fee2 	bl	8000d58 <_printf_common>
 8000f94:	3001      	adds	r0, #1
 8000f96:	d14c      	bne.n	8001032 <_printf_i+0x1fe>
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	b004      	add	sp, #16
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	4835      	ldr	r0, [pc, #212]	; (8001078 <_printf_i+0x244>)
 8000fa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	680e      	ldr	r6, [r1, #0]
 8000fac:	061f      	lsls	r7, r3, #24
 8000fae:	f856 5b04 	ldr.w	r5, [r6], #4
 8000fb2:	600e      	str	r6, [r1, #0]
 8000fb4:	d514      	bpl.n	8000fe0 <_printf_i+0x1ac>
 8000fb6:	07d9      	lsls	r1, r3, #31
 8000fb8:	bf44      	itt	mi
 8000fba:	f043 0320 	orrmi.w	r3, r3, #32
 8000fbe:	6023      	strmi	r3, [r4, #0]
 8000fc0:	b91d      	cbnz	r5, 8000fca <_printf_i+0x196>
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f023 0320 	bic.w	r3, r3, #32
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	e7b0      	b.n	8000f30 <_printf_i+0xfc>
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	2378      	movs	r3, #120	; 0x78
 8000fd8:	4828      	ldr	r0, [pc, #160]	; (800107c <_printf_i+0x248>)
 8000fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fde:	e7e3      	b.n	8000fa8 <_printf_i+0x174>
 8000fe0:	065e      	lsls	r6, r3, #25
 8000fe2:	bf48      	it	mi
 8000fe4:	b2ad      	uxthmi	r5, r5
 8000fe6:	e7e6      	b.n	8000fb6 <_printf_i+0x182>
 8000fe8:	4616      	mov	r6, r2
 8000fea:	e7bb      	b.n	8000f64 <_printf_i+0x130>
 8000fec:	680b      	ldr	r3, [r1, #0]
 8000fee:	6826      	ldr	r6, [r4, #0]
 8000ff0:	6960      	ldr	r0, [r4, #20]
 8000ff2:	1d1d      	adds	r5, r3, #4
 8000ff4:	600d      	str	r5, [r1, #0]
 8000ff6:	0635      	lsls	r5, r6, #24
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	d501      	bpl.n	8001000 <_printf_i+0x1cc>
 8000ffc:	6018      	str	r0, [r3, #0]
 8000ffe:	e002      	b.n	8001006 <_printf_i+0x1d2>
 8001000:	0671      	lsls	r1, r6, #25
 8001002:	d5fb      	bpl.n	8000ffc <_printf_i+0x1c8>
 8001004:	8018      	strh	r0, [r3, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	6123      	str	r3, [r4, #16]
 800100a:	4616      	mov	r6, r2
 800100c:	e7ba      	b.n	8000f84 <_printf_i+0x150>
 800100e:	680b      	ldr	r3, [r1, #0]
 8001010:	1d1a      	adds	r2, r3, #4
 8001012:	600a      	str	r2, [r1, #0]
 8001014:	681e      	ldr	r6, [r3, #0]
 8001016:	6862      	ldr	r2, [r4, #4]
 8001018:	2100      	movs	r1, #0
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff f8e0 	bl	80001e0 <memchr>
 8001020:	b108      	cbz	r0, 8001026 <_printf_i+0x1f2>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	6060      	str	r0, [r4, #4]
 8001026:	6863      	ldr	r3, [r4, #4]
 8001028:	6123      	str	r3, [r4, #16]
 800102a:	2300      	movs	r3, #0
 800102c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001030:	e7a8      	b.n	8000f84 <_printf_i+0x150>
 8001032:	6923      	ldr	r3, [r4, #16]
 8001034:	4632      	mov	r2, r6
 8001036:	4649      	mov	r1, r9
 8001038:	4640      	mov	r0, r8
 800103a:	47d0      	blx	sl
 800103c:	3001      	adds	r0, #1
 800103e:	d0ab      	beq.n	8000f98 <_printf_i+0x164>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	079b      	lsls	r3, r3, #30
 8001044:	d413      	bmi.n	800106e <_printf_i+0x23a>
 8001046:	68e0      	ldr	r0, [r4, #12]
 8001048:	9b03      	ldr	r3, [sp, #12]
 800104a:	4298      	cmp	r0, r3
 800104c:	bfb8      	it	lt
 800104e:	4618      	movlt	r0, r3
 8001050:	e7a4      	b.n	8000f9c <_printf_i+0x168>
 8001052:	2301      	movs	r3, #1
 8001054:	4632      	mov	r2, r6
 8001056:	4649      	mov	r1, r9
 8001058:	4640      	mov	r0, r8
 800105a:	47d0      	blx	sl
 800105c:	3001      	adds	r0, #1
 800105e:	d09b      	beq.n	8000f98 <_printf_i+0x164>
 8001060:	3501      	adds	r5, #1
 8001062:	68e3      	ldr	r3, [r4, #12]
 8001064:	9903      	ldr	r1, [sp, #12]
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	42ab      	cmp	r3, r5
 800106a:	dcf2      	bgt.n	8001052 <_printf_i+0x21e>
 800106c:	e7eb      	b.n	8001046 <_printf_i+0x212>
 800106e:	2500      	movs	r5, #0
 8001070:	f104 0619 	add.w	r6, r4, #25
 8001074:	e7f5      	b.n	8001062 <_printf_i+0x22e>
 8001076:	bf00      	nop
 8001078:	08001769 	.word	0x08001769
 800107c:	0800177a 	.word	0x0800177a

08001080 <_sbrk_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d06      	ldr	r5, [pc, #24]	; (800109c <_sbrk_r+0x1c>)
 8001084:	2300      	movs	r3, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	f7ff fa0c 	bl	80004a8 <_sbrk>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_sbrk_r+0x1a>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_sbrk_r+0x1a>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	200000a0 	.word	0x200000a0

080010a0 <__sread>:
 80010a0:	b510      	push	{r4, lr}
 80010a2:	460c      	mov	r4, r1
 80010a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a8:	f000 fab4 	bl	8001614 <_read_r>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	bfab      	itete	ge
 80010b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010b2:	89a3      	ldrhlt	r3, [r4, #12]
 80010b4:	181b      	addge	r3, r3, r0
 80010b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010ba:	bfac      	ite	ge
 80010bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80010be:	81a3      	strhlt	r3, [r4, #12]
 80010c0:	bd10      	pop	{r4, pc}

080010c2 <__swrite>:
 80010c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	461f      	mov	r7, r3
 80010c8:	898b      	ldrh	r3, [r1, #12]
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	4605      	mov	r5, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4616      	mov	r6, r2
 80010d2:	d505      	bpl.n	80010e0 <__swrite+0x1e>
 80010d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d8:	2302      	movs	r3, #2
 80010da:	2200      	movs	r2, #0
 80010dc:	f000 f9c8 	bl	8001470 <_lseek_r>
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ea:	81a3      	strh	r3, [r4, #12]
 80010ec:	4632      	mov	r2, r6
 80010ee:	463b      	mov	r3, r7
 80010f0:	4628      	mov	r0, r5
 80010f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010f6:	f000 b869 	b.w	80011cc <_write_r>

080010fa <__sseek>:
 80010fa:	b510      	push	{r4, lr}
 80010fc:	460c      	mov	r4, r1
 80010fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001102:	f000 f9b5 	bl	8001470 <_lseek_r>
 8001106:	1c43      	adds	r3, r0, #1
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	bf15      	itete	ne
 800110c:	6560      	strne	r0, [r4, #84]	; 0x54
 800110e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001116:	81a3      	strheq	r3, [r4, #12]
 8001118:	bf18      	it	ne
 800111a:	81a3      	strhne	r3, [r4, #12]
 800111c:	bd10      	pop	{r4, pc}

0800111e <__sclose>:
 800111e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001122:	f000 b8d3 	b.w	80012cc <_close_r>
	...

08001128 <__swbuf_r>:
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	460e      	mov	r6, r1
 800112c:	4614      	mov	r4, r2
 800112e:	4605      	mov	r5, r0
 8001130:	b118      	cbz	r0, 800113a <__swbuf_r+0x12>
 8001132:	6983      	ldr	r3, [r0, #24]
 8001134:	b90b      	cbnz	r3, 800113a <__swbuf_r+0x12>
 8001136:	f7ff fbbb 	bl	80008b0 <__sinit>
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <__swbuf_r+0x98>)
 800113c:	429c      	cmp	r4, r3
 800113e:	d12b      	bne.n	8001198 <__swbuf_r+0x70>
 8001140:	686c      	ldr	r4, [r5, #4]
 8001142:	69a3      	ldr	r3, [r4, #24]
 8001144:	60a3      	str	r3, [r4, #8]
 8001146:	89a3      	ldrh	r3, [r4, #12]
 8001148:	071a      	lsls	r2, r3, #28
 800114a:	d52f      	bpl.n	80011ac <__swbuf_r+0x84>
 800114c:	6923      	ldr	r3, [r4, #16]
 800114e:	b36b      	cbz	r3, 80011ac <__swbuf_r+0x84>
 8001150:	6923      	ldr	r3, [r4, #16]
 8001152:	6820      	ldr	r0, [r4, #0]
 8001154:	1ac0      	subs	r0, r0, r3
 8001156:	6963      	ldr	r3, [r4, #20]
 8001158:	b2f6      	uxtb	r6, r6
 800115a:	4283      	cmp	r3, r0
 800115c:	4637      	mov	r7, r6
 800115e:	dc04      	bgt.n	800116a <__swbuf_r+0x42>
 8001160:	4621      	mov	r1, r4
 8001162:	4628      	mov	r0, r5
 8001164:	f000 f948 	bl	80013f8 <_fflush_r>
 8001168:	bb30      	cbnz	r0, 80011b8 <__swbuf_r+0x90>
 800116a:	68a3      	ldr	r3, [r4, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	60a3      	str	r3, [r4, #8]
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	6022      	str	r2, [r4, #0]
 8001176:	701e      	strb	r6, [r3, #0]
 8001178:	6963      	ldr	r3, [r4, #20]
 800117a:	3001      	adds	r0, #1
 800117c:	4283      	cmp	r3, r0
 800117e:	d004      	beq.n	800118a <__swbuf_r+0x62>
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	07db      	lsls	r3, r3, #31
 8001184:	d506      	bpl.n	8001194 <__swbuf_r+0x6c>
 8001186:	2e0a      	cmp	r6, #10
 8001188:	d104      	bne.n	8001194 <__swbuf_r+0x6c>
 800118a:	4621      	mov	r1, r4
 800118c:	4628      	mov	r0, r5
 800118e:	f000 f933 	bl	80013f8 <_fflush_r>
 8001192:	b988      	cbnz	r0, 80011b8 <__swbuf_r+0x90>
 8001194:	4638      	mov	r0, r7
 8001196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <__swbuf_r+0x9c>)
 800119a:	429c      	cmp	r4, r3
 800119c:	d101      	bne.n	80011a2 <__swbuf_r+0x7a>
 800119e:	68ac      	ldr	r4, [r5, #8]
 80011a0:	e7cf      	b.n	8001142 <__swbuf_r+0x1a>
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <__swbuf_r+0xa0>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	bf08      	it	eq
 80011a8:	68ec      	ldreq	r4, [r5, #12]
 80011aa:	e7ca      	b.n	8001142 <__swbuf_r+0x1a>
 80011ac:	4621      	mov	r1, r4
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 f81e 	bl	80011f0 <__swsetup_r>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d0cb      	beq.n	8001150 <__swbuf_r+0x28>
 80011b8:	f04f 37ff 	mov.w	r7, #4294967295
 80011bc:	e7ea      	b.n	8001194 <__swbuf_r+0x6c>
 80011be:	bf00      	nop
 80011c0:	08001718 	.word	0x08001718
 80011c4:	08001738 	.word	0x08001738
 80011c8:	080016f8 	.word	0x080016f8

080011cc <_write_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4d07      	ldr	r5, [pc, #28]	; (80011ec <_write_r+0x20>)
 80011d0:	4604      	mov	r4, r0
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	602a      	str	r2, [r5, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	f7ff f914 	bl	8000408 <_write>
 80011e0:	1c43      	adds	r3, r0, #1
 80011e2:	d102      	bne.n	80011ea <_write_r+0x1e>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	b103      	cbz	r3, 80011ea <_write_r+0x1e>
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	bd38      	pop	{r3, r4, r5, pc}
 80011ec:	200000a0 	.word	0x200000a0

080011f0 <__swsetup_r>:
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <__swsetup_r+0xcc>)
 80011f2:	b570      	push	{r4, r5, r6, lr}
 80011f4:	681d      	ldr	r5, [r3, #0]
 80011f6:	4606      	mov	r6, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	b125      	cbz	r5, 8001206 <__swsetup_r+0x16>
 80011fc:	69ab      	ldr	r3, [r5, #24]
 80011fe:	b913      	cbnz	r3, 8001206 <__swsetup_r+0x16>
 8001200:	4628      	mov	r0, r5
 8001202:	f7ff fb55 	bl	80008b0 <__sinit>
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <__swsetup_r+0xd0>)
 8001208:	429c      	cmp	r4, r3
 800120a:	d10f      	bne.n	800122c <__swsetup_r+0x3c>
 800120c:	686c      	ldr	r4, [r5, #4]
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001214:	0719      	lsls	r1, r3, #28
 8001216:	d42c      	bmi.n	8001272 <__swsetup_r+0x82>
 8001218:	06dd      	lsls	r5, r3, #27
 800121a:	d411      	bmi.n	8001240 <__swsetup_r+0x50>
 800121c:	2309      	movs	r3, #9
 800121e:	6033      	str	r3, [r6, #0]
 8001220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001224:	81a3      	strh	r3, [r4, #12]
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	e03e      	b.n	80012aa <__swsetup_r+0xba>
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <__swsetup_r+0xd4>)
 800122e:	429c      	cmp	r4, r3
 8001230:	d101      	bne.n	8001236 <__swsetup_r+0x46>
 8001232:	68ac      	ldr	r4, [r5, #8]
 8001234:	e7eb      	b.n	800120e <__swsetup_r+0x1e>
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <__swsetup_r+0xd8>)
 8001238:	429c      	cmp	r4, r3
 800123a:	bf08      	it	eq
 800123c:	68ec      	ldreq	r4, [r5, #12]
 800123e:	e7e6      	b.n	800120e <__swsetup_r+0x1e>
 8001240:	0758      	lsls	r0, r3, #29
 8001242:	d512      	bpl.n	800126a <__swsetup_r+0x7a>
 8001244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001246:	b141      	cbz	r1, 800125a <__swsetup_r+0x6a>
 8001248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800124c:	4299      	cmp	r1, r3
 800124e:	d002      	beq.n	8001256 <__swsetup_r+0x66>
 8001250:	4630      	mov	r0, r6
 8001252:	f000 f98f 	bl	8001574 <_free_r>
 8001256:	2300      	movs	r3, #0
 8001258:	6363      	str	r3, [r4, #52]	; 0x34
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001260:	81a3      	strh	r3, [r4, #12]
 8001262:	2300      	movs	r3, #0
 8001264:	6063      	str	r3, [r4, #4]
 8001266:	6923      	ldr	r3, [r4, #16]
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	b94b      	cbnz	r3, 800128a <__swsetup_r+0x9a>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800127c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001280:	d003      	beq.n	800128a <__swsetup_r+0x9a>
 8001282:	4621      	mov	r1, r4
 8001284:	4630      	mov	r0, r6
 8001286:	f000 f929 	bl	80014dc <__smakebuf_r>
 800128a:	89a0      	ldrh	r0, [r4, #12]
 800128c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001290:	f010 0301 	ands.w	r3, r0, #1
 8001294:	d00a      	beq.n	80012ac <__swsetup_r+0xbc>
 8001296:	2300      	movs	r3, #0
 8001298:	60a3      	str	r3, [r4, #8]
 800129a:	6963      	ldr	r3, [r4, #20]
 800129c:	425b      	negs	r3, r3
 800129e:	61a3      	str	r3, [r4, #24]
 80012a0:	6923      	ldr	r3, [r4, #16]
 80012a2:	b943      	cbnz	r3, 80012b6 <__swsetup_r+0xc6>
 80012a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012a8:	d1ba      	bne.n	8001220 <__swsetup_r+0x30>
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	0781      	lsls	r1, r0, #30
 80012ae:	bf58      	it	pl
 80012b0:	6963      	ldrpl	r3, [r4, #20]
 80012b2:	60a3      	str	r3, [r4, #8]
 80012b4:	e7f4      	b.n	80012a0 <__swsetup_r+0xb0>
 80012b6:	2000      	movs	r0, #0
 80012b8:	e7f7      	b.n	80012aa <__swsetup_r+0xba>
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	08001718 	.word	0x08001718
 80012c4:	08001738 	.word	0x08001738
 80012c8:	080016f8 	.word	0x080016f8

080012cc <_close_r>:
 80012cc:	b538      	push	{r3, r4, r5, lr}
 80012ce:	4d06      	ldr	r5, [pc, #24]	; (80012e8 <_close_r+0x1c>)
 80012d0:	2300      	movs	r3, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	602b      	str	r3, [r5, #0]
 80012d8:	f7ff f8b2 	bl	8000440 <_close>
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	d102      	bne.n	80012e6 <_close_r+0x1a>
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	b103      	cbz	r3, 80012e6 <_close_r+0x1a>
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
 80012e8:	200000a0 	.word	0x200000a0

080012ec <__sflush_r>:
 80012ec:	898a      	ldrh	r2, [r1, #12]
 80012ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f2:	4605      	mov	r5, r0
 80012f4:	0710      	lsls	r0, r2, #28
 80012f6:	460c      	mov	r4, r1
 80012f8:	d458      	bmi.n	80013ac <__sflush_r+0xc0>
 80012fa:	684b      	ldr	r3, [r1, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc05      	bgt.n	800130c <__sflush_r+0x20>
 8001300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc02      	bgt.n	800130c <__sflush_r+0x20>
 8001306:	2000      	movs	r0, #0
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800130c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0f9      	beq.n	8001306 <__sflush_r+0x1a>
 8001312:	2300      	movs	r3, #0
 8001314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001318:	682f      	ldr	r7, [r5, #0]
 800131a:	602b      	str	r3, [r5, #0]
 800131c:	d032      	beq.n	8001384 <__sflush_r+0x98>
 800131e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	075a      	lsls	r2, r3, #29
 8001324:	d505      	bpl.n	8001332 <__sflush_r+0x46>
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	1ac0      	subs	r0, r0, r3
 800132a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800132c:	b10b      	cbz	r3, 8001332 <__sflush_r+0x46>
 800132e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	2300      	movs	r3, #0
 8001334:	4602      	mov	r2, r0
 8001336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001338:	6a21      	ldr	r1, [r4, #32]
 800133a:	4628      	mov	r0, r5
 800133c:	47b0      	blx	r6
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	d106      	bne.n	8001352 <__sflush_r+0x66>
 8001344:	6829      	ldr	r1, [r5, #0]
 8001346:	291d      	cmp	r1, #29
 8001348:	d82c      	bhi.n	80013a4 <__sflush_r+0xb8>
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <__sflush_r+0x108>)
 800134c:	40ca      	lsrs	r2, r1
 800134e:	07d6      	lsls	r6, r2, #31
 8001350:	d528      	bpl.n	80013a4 <__sflush_r+0xb8>
 8001352:	2200      	movs	r2, #0
 8001354:	6062      	str	r2, [r4, #4]
 8001356:	04d9      	lsls	r1, r3, #19
 8001358:	6922      	ldr	r2, [r4, #16]
 800135a:	6022      	str	r2, [r4, #0]
 800135c:	d504      	bpl.n	8001368 <__sflush_r+0x7c>
 800135e:	1c42      	adds	r2, r0, #1
 8001360:	d101      	bne.n	8001366 <__sflush_r+0x7a>
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	b903      	cbnz	r3, 8001368 <__sflush_r+0x7c>
 8001366:	6560      	str	r0, [r4, #84]	; 0x54
 8001368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	2900      	cmp	r1, #0
 800136e:	d0ca      	beq.n	8001306 <__sflush_r+0x1a>
 8001370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001374:	4299      	cmp	r1, r3
 8001376:	d002      	beq.n	800137e <__sflush_r+0x92>
 8001378:	4628      	mov	r0, r5
 800137a:	f000 f8fb 	bl	8001574 <_free_r>
 800137e:	2000      	movs	r0, #0
 8001380:	6360      	str	r0, [r4, #52]	; 0x34
 8001382:	e7c1      	b.n	8001308 <__sflush_r+0x1c>
 8001384:	6a21      	ldr	r1, [r4, #32]
 8001386:	2301      	movs	r3, #1
 8001388:	4628      	mov	r0, r5
 800138a:	47b0      	blx	r6
 800138c:	1c41      	adds	r1, r0, #1
 800138e:	d1c7      	bne.n	8001320 <__sflush_r+0x34>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0c4      	beq.n	8001320 <__sflush_r+0x34>
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d001      	beq.n	800139e <__sflush_r+0xb2>
 800139a:	2b16      	cmp	r3, #22
 800139c:	d101      	bne.n	80013a2 <__sflush_r+0xb6>
 800139e:	602f      	str	r7, [r5, #0]
 80013a0:	e7b1      	b.n	8001306 <__sflush_r+0x1a>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	e7ad      	b.n	8001308 <__sflush_r+0x1c>
 80013ac:	690f      	ldr	r7, [r1, #16]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d0a9      	beq.n	8001306 <__sflush_r+0x1a>
 80013b2:	0793      	lsls	r3, r2, #30
 80013b4:	680e      	ldr	r6, [r1, #0]
 80013b6:	bf08      	it	eq
 80013b8:	694b      	ldreq	r3, [r1, #20]
 80013ba:	600f      	str	r7, [r1, #0]
 80013bc:	bf18      	it	ne
 80013be:	2300      	movne	r3, #0
 80013c0:	eba6 0807 	sub.w	r8, r6, r7
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	f1b8 0f00 	cmp.w	r8, #0
 80013ca:	dd9c      	ble.n	8001306 <__sflush_r+0x1a>
 80013cc:	6a21      	ldr	r1, [r4, #32]
 80013ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d0:	4643      	mov	r3, r8
 80013d2:	463a      	mov	r2, r7
 80013d4:	4628      	mov	r0, r5
 80013d6:	47b0      	blx	r6
 80013d8:	2800      	cmp	r0, #0
 80013da:	dc06      	bgt.n	80013ea <__sflush_r+0xfe>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e78e      	b.n	8001308 <__sflush_r+0x1c>
 80013ea:	4407      	add	r7, r0
 80013ec:	eba8 0800 	sub.w	r8, r8, r0
 80013f0:	e7e9      	b.n	80013c6 <__sflush_r+0xda>
 80013f2:	bf00      	nop
 80013f4:	20400001 	.word	0x20400001

080013f8 <_fflush_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	b913      	cbnz	r3, 8001408 <_fflush_r+0x10>
 8001402:	2500      	movs	r5, #0
 8001404:	4628      	mov	r0, r5
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	b118      	cbz	r0, 8001412 <_fflush_r+0x1a>
 800140a:	6983      	ldr	r3, [r0, #24]
 800140c:	b90b      	cbnz	r3, 8001412 <_fflush_r+0x1a>
 800140e:	f7ff fa4f 	bl	80008b0 <__sinit>
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <_fflush_r+0x6c>)
 8001414:	429c      	cmp	r4, r3
 8001416:	d11b      	bne.n	8001450 <_fflush_r+0x58>
 8001418:	686c      	ldr	r4, [r5, #4]
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ef      	beq.n	8001402 <_fflush_r+0xa>
 8001422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001424:	07d0      	lsls	r0, r2, #31
 8001426:	d404      	bmi.n	8001432 <_fflush_r+0x3a>
 8001428:	0599      	lsls	r1, r3, #22
 800142a:	d402      	bmi.n	8001432 <_fflush_r+0x3a>
 800142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800142e:	f7ff fadd 	bl	80009ec <__retarget_lock_acquire_recursive>
 8001432:	4628      	mov	r0, r5
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff ff59 	bl	80012ec <__sflush_r>
 800143a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800143c:	07da      	lsls	r2, r3, #31
 800143e:	4605      	mov	r5, r0
 8001440:	d4e0      	bmi.n	8001404 <_fflush_r+0xc>
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	059b      	lsls	r3, r3, #22
 8001446:	d4dd      	bmi.n	8001404 <_fflush_r+0xc>
 8001448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144a:	f7ff fad0 	bl	80009ee <__retarget_lock_release_recursive>
 800144e:	e7d9      	b.n	8001404 <_fflush_r+0xc>
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <_fflush_r+0x70>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d101      	bne.n	800145a <_fflush_r+0x62>
 8001456:	68ac      	ldr	r4, [r5, #8]
 8001458:	e7df      	b.n	800141a <_fflush_r+0x22>
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <_fflush_r+0x74>)
 800145c:	429c      	cmp	r4, r3
 800145e:	bf08      	it	eq
 8001460:	68ec      	ldreq	r4, [r5, #12]
 8001462:	e7da      	b.n	800141a <_fflush_r+0x22>
 8001464:	08001718 	.word	0x08001718
 8001468:	08001738 	.word	0x08001738
 800146c:	080016f8 	.word	0x080016f8

08001470 <_lseek_r>:
 8001470:	b538      	push	{r3, r4, r5, lr}
 8001472:	4d07      	ldr	r5, [pc, #28]	; (8001490 <_lseek_r+0x20>)
 8001474:	4604      	mov	r4, r0
 8001476:	4608      	mov	r0, r1
 8001478:	4611      	mov	r1, r2
 800147a:	2200      	movs	r2, #0
 800147c:	602a      	str	r2, [r5, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	f7ff f805 	bl	800048e <_lseek>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d102      	bne.n	800148e <_lseek_r+0x1e>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	b103      	cbz	r3, 800148e <_lseek_r+0x1e>
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	bd38      	pop	{r3, r4, r5, pc}
 8001490:	200000a0 	.word	0x200000a0

08001494 <__swhatbuf_r>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	460e      	mov	r6, r1
 8001498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800149c:	2900      	cmp	r1, #0
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	da07      	bge.n	80014b6 <__swhatbuf_r+0x22>
 80014a6:	2300      	movs	r3, #0
 80014a8:	602b      	str	r3, [r5, #0]
 80014aa:	89b3      	ldrh	r3, [r6, #12]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	d410      	bmi.n	80014d2 <__swhatbuf_r+0x3e>
 80014b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b4:	e00e      	b.n	80014d4 <__swhatbuf_r+0x40>
 80014b6:	466a      	mov	r2, sp
 80014b8:	f000 f8be 	bl	8001638 <_fstat_r>
 80014bc:	2800      	cmp	r0, #0
 80014be:	dbf2      	blt.n	80014a6 <__swhatbuf_r+0x12>
 80014c0:	9a01      	ldr	r2, [sp, #4]
 80014c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80014c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80014ca:	425a      	negs	r2, r3
 80014cc:	415a      	adcs	r2, r3
 80014ce:	602a      	str	r2, [r5, #0]
 80014d0:	e7ee      	b.n	80014b0 <__swhatbuf_r+0x1c>
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	2000      	movs	r0, #0
 80014d6:	6023      	str	r3, [r4, #0]
 80014d8:	b016      	add	sp, #88	; 0x58
 80014da:	bd70      	pop	{r4, r5, r6, pc}

080014dc <__smakebuf_r>:
 80014dc:	898b      	ldrh	r3, [r1, #12]
 80014de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014e0:	079d      	lsls	r5, r3, #30
 80014e2:	4606      	mov	r6, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	d507      	bpl.n	80014f8 <__smakebuf_r+0x1c>
 80014e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	6123      	str	r3, [r4, #16]
 80014f0:	2301      	movs	r3, #1
 80014f2:	6163      	str	r3, [r4, #20]
 80014f4:	b002      	add	sp, #8
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	ab01      	add	r3, sp, #4
 80014fa:	466a      	mov	r2, sp
 80014fc:	f7ff ffca 	bl	8001494 <__swhatbuf_r>
 8001500:	9900      	ldr	r1, [sp, #0]
 8001502:	4605      	mov	r5, r0
 8001504:	4630      	mov	r0, r6
 8001506:	f7ff fa73 	bl	80009f0 <_malloc_r>
 800150a:	b948      	cbnz	r0, 8001520 <__smakebuf_r+0x44>
 800150c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001510:	059a      	lsls	r2, r3, #22
 8001512:	d4ef      	bmi.n	80014f4 <__smakebuf_r+0x18>
 8001514:	f023 0303 	bic.w	r3, r3, #3
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	81a3      	strh	r3, [r4, #12]
 800151e:	e7e3      	b.n	80014e8 <__smakebuf_r+0xc>
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <__smakebuf_r+0x7c>)
 8001522:	62b3      	str	r3, [r6, #40]	; 0x28
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	6020      	str	r0, [r4, #0]
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	81a3      	strh	r3, [r4, #12]
 800152e:	9b00      	ldr	r3, [sp, #0]
 8001530:	6163      	str	r3, [r4, #20]
 8001532:	9b01      	ldr	r3, [sp, #4]
 8001534:	6120      	str	r0, [r4, #16]
 8001536:	b15b      	cbz	r3, 8001550 <__smakebuf_r+0x74>
 8001538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800153c:	4630      	mov	r0, r6
 800153e:	f000 f88d 	bl	800165c <_isatty_r>
 8001542:	b128      	cbz	r0, 8001550 <__smakebuf_r+0x74>
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	81a3      	strh	r3, [r4, #12]
 8001550:	89a0      	ldrh	r0, [r4, #12]
 8001552:	4305      	orrs	r5, r0
 8001554:	81a5      	strh	r5, [r4, #12]
 8001556:	e7cd      	b.n	80014f4 <__smakebuf_r+0x18>
 8001558:	08000849 	.word	0x08000849

0800155c <__malloc_lock>:
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <__malloc_lock+0x8>)
 800155e:	f7ff ba45 	b.w	80009ec <__retarget_lock_acquire_recursive>
 8001562:	bf00      	nop
 8001564:	20000098 	.word	0x20000098

08001568 <__malloc_unlock>:
 8001568:	4801      	ldr	r0, [pc, #4]	; (8001570 <__malloc_unlock+0x8>)
 800156a:	f7ff ba40 	b.w	80009ee <__retarget_lock_release_recursive>
 800156e:	bf00      	nop
 8001570:	20000098 	.word	0x20000098

08001574 <_free_r>:
 8001574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001576:	2900      	cmp	r1, #0
 8001578:	d048      	beq.n	800160c <_free_r+0x98>
 800157a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800157e:	9001      	str	r0, [sp, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f1a1 0404 	sub.w	r4, r1, #4
 8001586:	bfb8      	it	lt
 8001588:	18e4      	addlt	r4, r4, r3
 800158a:	f7ff ffe7 	bl	800155c <__malloc_lock>
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <_free_r+0x9c>)
 8001590:	9801      	ldr	r0, [sp, #4]
 8001592:	6813      	ldr	r3, [r2, #0]
 8001594:	4615      	mov	r5, r2
 8001596:	b933      	cbnz	r3, 80015a6 <_free_r+0x32>
 8001598:	6063      	str	r3, [r4, #4]
 800159a:	6014      	str	r4, [r2, #0]
 800159c:	b003      	add	sp, #12
 800159e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015a2:	f7ff bfe1 	b.w	8001568 <__malloc_unlock>
 80015a6:	42a3      	cmp	r3, r4
 80015a8:	d90b      	bls.n	80015c2 <_free_r+0x4e>
 80015aa:	6821      	ldr	r1, [r4, #0]
 80015ac:	1862      	adds	r2, r4, r1
 80015ae:	4293      	cmp	r3, r2
 80015b0:	bf04      	itt	eq
 80015b2:	681a      	ldreq	r2, [r3, #0]
 80015b4:	685b      	ldreq	r3, [r3, #4]
 80015b6:	6063      	str	r3, [r4, #4]
 80015b8:	bf04      	itt	eq
 80015ba:	1852      	addeq	r2, r2, r1
 80015bc:	6022      	streq	r2, [r4, #0]
 80015be:	602c      	str	r4, [r5, #0]
 80015c0:	e7ec      	b.n	800159c <_free_r+0x28>
 80015c2:	461a      	mov	r2, r3
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b10b      	cbz	r3, 80015cc <_free_r+0x58>
 80015c8:	42a3      	cmp	r3, r4
 80015ca:	d9fa      	bls.n	80015c2 <_free_r+0x4e>
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	1855      	adds	r5, r2, r1
 80015d0:	42a5      	cmp	r5, r4
 80015d2:	d10b      	bne.n	80015ec <_free_r+0x78>
 80015d4:	6824      	ldr	r4, [r4, #0]
 80015d6:	4421      	add	r1, r4
 80015d8:	1854      	adds	r4, r2, r1
 80015da:	42a3      	cmp	r3, r4
 80015dc:	6011      	str	r1, [r2, #0]
 80015de:	d1dd      	bne.n	800159c <_free_r+0x28>
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	6053      	str	r3, [r2, #4]
 80015e6:	4421      	add	r1, r4
 80015e8:	6011      	str	r1, [r2, #0]
 80015ea:	e7d7      	b.n	800159c <_free_r+0x28>
 80015ec:	d902      	bls.n	80015f4 <_free_r+0x80>
 80015ee:	230c      	movs	r3, #12
 80015f0:	6003      	str	r3, [r0, #0]
 80015f2:	e7d3      	b.n	800159c <_free_r+0x28>
 80015f4:	6825      	ldr	r5, [r4, #0]
 80015f6:	1961      	adds	r1, r4, r5
 80015f8:	428b      	cmp	r3, r1
 80015fa:	bf04      	itt	eq
 80015fc:	6819      	ldreq	r1, [r3, #0]
 80015fe:	685b      	ldreq	r3, [r3, #4]
 8001600:	6063      	str	r3, [r4, #4]
 8001602:	bf04      	itt	eq
 8001604:	1949      	addeq	r1, r1, r5
 8001606:	6021      	streq	r1, [r4, #0]
 8001608:	6054      	str	r4, [r2, #4]
 800160a:	e7c7      	b.n	800159c <_free_r+0x28>
 800160c:	b003      	add	sp, #12
 800160e:	bd30      	pop	{r4, r5, pc}
 8001610:	20000084 	.word	0x20000084

08001614 <_read_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4d07      	ldr	r5, [pc, #28]	; (8001634 <_read_r+0x20>)
 8001618:	4604      	mov	r4, r0
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	2200      	movs	r2, #0
 8001620:	602a      	str	r2, [r5, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	f7fe fed3 	bl	80003ce <_read>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	d102      	bne.n	8001632 <_read_r+0x1e>
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	b103      	cbz	r3, 8001632 <_read_r+0x1e>
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	200000a0 	.word	0x200000a0

08001638 <_fstat_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d07      	ldr	r5, [pc, #28]	; (8001658 <_fstat_r+0x20>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	f7fe ff07 	bl	8000458 <_fstat>
 800164a:	1c43      	adds	r3, r0, #1
 800164c:	d102      	bne.n	8001654 <_fstat_r+0x1c>
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	b103      	cbz	r3, 8001654 <_fstat_r+0x1c>
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	bd38      	pop	{r3, r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	200000a0 	.word	0x200000a0

0800165c <_isatty_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d06      	ldr	r5, [pc, #24]	; (8001678 <_isatty_r+0x1c>)
 8001660:	2300      	movs	r3, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	f7fe ff06 	bl	8000478 <_isatty>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_isatty_r+0x1a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_isatty_r+0x1a>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	200000a0 	.word	0x200000a0

0800167c <_init>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr

08001688 <_fini>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr
