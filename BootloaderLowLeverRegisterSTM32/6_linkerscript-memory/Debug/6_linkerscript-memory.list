
6_linkerscript-memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .custom_ram_block 0000000a  20000100  20000100  00020100  2**2
                  ALLOC
  2 .custom_flash_block 0000000a  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00000364  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000000  08004370  08004378  00014378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ARM.extab    00000000  08004370  08004370  00014378  2**0
                  CONTENTS
  6 .ARM          00000000  08004370  08004370  00014378  2**0
                  CONTENTS
  7 .preinit_array 00000000  08004370  08004378  00014378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000002  2000010a  08004378  0002010a  2**0
                  ALLOC
 11 .bss          00000028  2000010c  08004378  0002010c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000134  08004378  00020134  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00014378  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001908  00000000  00000000  000143a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000069f  00000000  00000000  00015cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000128  00000000  00000000  00016350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000d0  00000000  00000000  00016478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ef52  00000000  00000000  00016548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d9e  00000000  00000000  0002549a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00053d62  00000000  00000000  00027238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0007af9a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000002ac  00000000  00000000  0007aff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800400c <__do_global_dtors_aux>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4c05      	ldr	r4, [pc, #20]	; (8004024 <__do_global_dtors_aux+0x18>)
 8004010:	7823      	ldrb	r3, [r4, #0]
 8004012:	b933      	cbnz	r3, 8004022 <__do_global_dtors_aux+0x16>
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__do_global_dtors_aux+0x1c>)
 8004016:	b113      	cbz	r3, 800401e <__do_global_dtors_aux+0x12>
 8004018:	4804      	ldr	r0, [pc, #16]	; (800402c <__do_global_dtors_aux+0x20>)
 800401a:	f3af 8000 	nop.w
 800401e:	2301      	movs	r3, #1
 8004020:	7023      	strb	r3, [r4, #0]
 8004022:	bd10      	pop	{r4, pc}
 8004024:	2000010c 	.word	0x2000010c
 8004028:	00000000 	.word	0x00000000
 800402c:	08004358 	.word	0x08004358

08004030 <frame_dummy>:
 8004030:	b508      	push	{r3, lr}
 8004032:	4b03      	ldr	r3, [pc, #12]	; (8004040 <frame_dummy+0x10>)
 8004034:	b11b      	cbz	r3, 800403e <frame_dummy+0xe>
 8004036:	4903      	ldr	r1, [pc, #12]	; (8004044 <frame_dummy+0x14>)
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <frame_dummy+0x18>)
 800403a:	f3af 8000 	nop.w
 800403e:	bd08      	pop	{r3, pc}
 8004040:	00000000 	.word	0x00000000
 8004044:	20000110 	.word	0x20000110
 8004048:	08004358 	.word	0x08004358

0800404c <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <led_init+0x34>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <led_init+0x34>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <led_init+0x38>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <led_init+0x38>)
 8004062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004066:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <led_init+0x38>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a05      	ldr	r2, [pc, #20]	; (8004084 <led_init+0x38>)
 800406e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	40020000 	.word	0x40020000

08004088 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <button_init+0x34>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <button_init+0x34>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <button_init+0x38>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <button_init+0x38>)
 800409e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <button_init+0x38>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <button_init+0x38>)
 80040aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80040ae:	6013      	str	r3, [r2, #0]

}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020800 	.word	0x40020800

080040c4 <get_btn_state>:


bool get_btn_state(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

	/*Note : BTN is active low*/

	/*Check if button is pressed*/
	if(GPIOC->IDR & BTN_PIN)
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <get_btn_state+0x20>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <get_btn_state+0x14>
	{
		return false;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <get_btn_state+0x16>
	}
	else
	{
		return true;
 80040d8:	2301      	movs	r3, #1
	}

}
 80040da:	4618      	mov	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40020800 	.word	0x40020800

080040e8 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <fpu_enable+0x50>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	4a11      	ldr	r2, [pc, #68]	; (8004138 <fpu_enable+0x50>)
 80040f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <fpu_enable+0x50>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <fpu_enable+0x50>)
 8004104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <fpu_enable+0x50>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <fpu_enable+0x50>)
 8004114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <fpu_enable+0x50>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <fpu_enable+0x50>)
 8004124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <main>:

unsigned char __attribute__((section(".custom_ram_block"))) custom_ram_buff[10];   //10 bytes
unsigned char __attribute__((section(".custom_flash_block"))) custom_flash_buff[10];   //10 bytes

int main()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8004140:	f7ff ffd2 	bl	80040e8 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 8004144:	f000 f848 	bl	80041d8 <debug_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8004148:	f000 f81c 	bl	8004184 <timebase_init>

	/*Initialize LED*/
	led_init();
 800414c:	f7ff ff7e 	bl	800404c <led_init>

	/*Initialize Push button*/

	button_init();
 8004150:	f7ff ff9a 	bl	8004088 <button_init>
	while(1)
	{

		btn_state = get_btn_state();
 8004154:	f7ff ffb6 	bl	80040c4 <get_btn_state>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <main+0x28>)
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e7f8      	b.n	8004154 <main+0x18>
 8004162:	bf00      	nop
 8004164:	20000128 	.word	0x20000128

08004168 <tick_increment>:

	return g_curr_tick_p;

}
static void tick_increment(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <tick_increment+0x18>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <tick_increment+0x18>)
 8004174:	6013      	str	r3, [r2, #0]
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	20000130 	.word	0x20000130

08004184 <timebase_init>:
void timebase_init(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004188:	b672      	cpsid	i
}
 800418a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <timebase_init+0x40>)
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <timebase_init+0x44>)
 8004190:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <timebase_init+0x40>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <timebase_init+0x40>)
 800419a:	2204      	movs	r2, #4
 800419c:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <timebase_init+0x40>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <timebase_init+0x40>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <timebase_init+0x40>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <timebase_init+0x40>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041b6:	b662      	cpsie	i
}
 80041b8:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e010 	.word	0xe000e010
 80041c8:	00f423ff 	.word	0x00f423ff

080041cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
	tick_increment();
 80041d0:	f7ff ffca 	bl	8004168 <tick_increment>
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <debug_uart_init+0x84>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	4a1e      	ldr	r2, [pc, #120]	; (800425c <debug_uart_init+0x84>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <debug_uart_init+0x88>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <debug_uart_init+0x88>)
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <debug_uart_init+0x88>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <debug_uart_init+0x88>)
 80041fa:	f043 0320 	orr.w	r3, r3, #32
 80041fe:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8004200:	4b17      	ldr	r3, [pc, #92]	; (8004260 <debug_uart_init+0x88>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a16      	ldr	r2, [pc, #88]	; (8004260 <debug_uart_init+0x88>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <debug_uart_init+0x88>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a13      	ldr	r2, [pc, #76]	; (8004260 <debug_uart_init+0x88>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <debug_uart_init+0x88>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a10      	ldr	r2, [pc, #64]	; (8004260 <debug_uart_init+0x88>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <debug_uart_init+0x88>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <debug_uart_init+0x88>)
 800422a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <debug_uart_init+0x84>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <debug_uart_init+0x84>)
 8004236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800423a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 800423c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004240:	4808      	ldr	r0, [pc, #32]	; (8004264 <debug_uart_init+0x8c>)
 8004242:	f000 f827 	bl	8004294 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <debug_uart_init+0x90>)
 8004248:	2208      	movs	r2, #8
 800424a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <debug_uart_init+0x90>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a05      	ldr	r2, [pc, #20]	; (8004268 <debug_uart_init+0x90>)
 8004252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	40020000 	.word	0x40020000
 8004264:	00f42400 	.word	0x00f42400
 8004268:	40004400 	.word	0x40004400

0800426c <compute_uart_bd>:

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	085a      	lsrs	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	441a      	add	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	b29b      	uxth	r3, r3
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffe3 	bl	800426c <compute_uart_bd>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <uart_set_baudrate+0x24>)
 80042ac:	609a      	str	r2, [r3, #8]
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40004400 	.word	0x40004400

080042bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042bc:	480d      	ldr	r0, [pc, #52]	; (80042f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042c4:	480c      	ldr	r0, [pc, #48]	; (80042f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80042c6:	490d      	ldr	r1, [pc, #52]	; (80042fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80042c8:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <LoopForever+0xe>)
  movs r3, #0
 80042ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042cc:	e002      	b.n	80042d4 <LoopCopyDataInit>

080042ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042d2:	3304      	adds	r3, #4

080042d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042d8:	d3f9      	bcc.n	80042ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042dc:	4c0a      	ldr	r4, [pc, #40]	; (8004308 <LoopForever+0x16>)
  movs r3, #0
 80042de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e0:	e001      	b.n	80042e6 <LoopFillZerobss>

080042e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e4:	3204      	adds	r2, #4

080042e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042e8:	d3fb      	bcc.n	80042e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042ea:	f000 f811 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042ee:	f7ff ff25 	bl	800413c <main>

080042f2 <LoopForever>:

LoopForever:
    b LoopForever
 80042f2:	e7fe      	b.n	80042f2 <LoopForever>
  ldr   r0, =_estack
 80042f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042f8:	2000010c 	.word	0x2000010c
  ldr r1, =_edata
 80042fc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8004300:	08004378 	.word	0x08004378
  ldr r2, =_sbss
 8004304:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8004308:	20000134 	.word	0x20000134

0800430c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800430c:	e7fe      	b.n	800430c <ADC_IRQHandler>
	...

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4d0d      	ldr	r5, [pc, #52]	; (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004316:	1b64      	subs	r4, r4, r5
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2600      	movs	r6, #0
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4d0b      	ldr	r5, [pc, #44]	; (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	; (8004354 <__libc_init_array+0x44>)
 8004324:	f000 f818 	bl	8004358 <_init>
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2600      	movs	r6, #0
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08004370 	.word	0x08004370
 800434c:	08004370 	.word	0x08004370
 8004350:	08004370 	.word	0x08004370
 8004354:	08004374 	.word	0x08004374

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
